name: Build and upload artifacts

env:
  PD_VERSION: 0.55-0
  LIBNAME: quatkram
  FFTW_VERSION: 3.3.5

on:
  push:
    branches: [ main, build-tests ]
    tags: [ '*' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        floatsize: [32, 64]
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libfftw3-dev
        git clone --branch=${{ env.PD_VERSION }} --depth=1 https://github.com/pure-data/pure-data.git

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install fftw
        wget https://github.com/pure-data/pure-data/archive/refs/tags/${{ env.PD_VERSION }}.zip
        unzip ${{ env.PD_VERSION }}.zip

    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        # Download and extract Pure Data (32-bit or 64-bit based on floatsize)
        if (${{ matrix.floatsize }} -eq 32) {
          Invoke-WebRequest -Uri "http://msp.ucsd.edu/Software/pd-${{ env.PD_VERSION }}.msw.zip" -OutFile pd.zip
          Expand-Archive pd.zip -DestinationPath .
        } else {
          Invoke-WebRequest -Uri "https://puredata.info/downloads/pure-data/releases/${{ env.PD_VERSION }}-pd64/Pd64-${{ env.PD_VERSION }}.msw.zip" -OutFile pd.zip
          Expand-Archive pd.zip -DestinationPath .
          Get-ChildItem -Directory -Filter 'Pd-0.*' | ForEach-Object { Rename-Item $_.FullName "pd-${{ env.PD_VERSION }}" }
        }
        
        # Download and extract FFTW (always 64-bit)
        Invoke-WebRequest -Uri "https://fftw.org/pub/fftw/fftw-${{ env.FFTW_VERSION }}-dll64.zip" -OutFile fftw.zip
        Expand-Archive fftw.zip -DestinationPath fftw
        
        # List contents of FFTW directory
        Get-ChildItem -Path fftw -Recurse

    - name: Build
      shell: bash
      run: |
        if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
          make install objectsdir=./build PDDIR=./pure-data FFTW_INCLUDE=/usr/include FFTW_LIB=/usr/lib floatsize=${{ matrix.floatsize }}
        elif [ "${{ matrix.os }}" == "macos-latest" ]; then
          make install objectsdir=./build PDDIR=./pure-data-${{ env.PD_VERSION }} FFTW_INCLUDE=$(brew --prefix fftw)/include FFTW_LIB=$(brew --prefix fftw)/lib floatsize=${{ matrix.floatsize }}
        elif [ "${{ matrix.os }}" == "windows-latest" ]; then
          FFTW_DIR="D:/a/pd-quatkram/pd-quatkram/fftw"
          PD_DIR="D:/a/pd-quatkram/pd-quatkram/pd-${{ env.PD_VERSION }}"
          
          # Ensure MinGW is in the PATH
          export PATH="/c/msys64/mingw64/bin:$PATH"
          
          # Explicitly set the compiler
          export CC=gcc
          export CXX=g++
          
          make install objectsdir=./build \
            PDDIR="$PD_DIR" \
            FFTW_INCLUDE="$FFTW_DIR" \
            FFTW_LIB="$FFTW_DIR" \
            floatsize=${{ matrix.floatsize }} \
            ldlibs="-L\"$FFTW_DIR\" -lfftw3f-3 -lws2_32 -lkernel32" \
            CC=gcc CXX=g++
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.LIBNAME }}-${{ matrix.os }}-pd${{ matrix.floatsize }}
        path: build

  github-release:
    if: github.ref_type == 'tag'
    runs-on: ubuntu-latest
    needs: [build]

    steps:
    - uses: actions/download-artifact@v4

    - name: Prepare release files
      run: |
        mkdir dist
        for x in ${{ env.LIBNAME }}-*; do (cd $x && zip -r ../dist/$x.zip ${{ env.LIBNAME }}/); done

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        prerelease: true
        draft: true
        files: dist/*.zip

  deken-upload:
    if: ${{ !contains(github.ref, 'test') }}
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - uses: actions/checkout@v4
      with:
        path: ${{ env.LIBNAME }}-src

    - uses: actions/download-artifact@v4

    - name: Upload to Deken
      env:
        DEKEN_USERNAME: ${{ secrets.DEKEN_USERNAME }}
        DEKEN_PASSWORD: ${{ secrets.DEKEN_PASSWORD }}
      run: |
        for os in ubuntu-latest macos-latest windows-latest; do
          for floatsize in 32 64; do
            docker run --rm -e DEKEN_USERNAME -e DEKEN_PASSWORD \
              --volume ./${{ env.LIBNAME }}-${os}-pd${floatsize}}:/${{ env.LIBNAME }} registry.git.iem.at/pd/deken \
              deken upload --no-source-error -v "${{ github.ref_name }}" /${{ env.LIBNAME }}
          done
        done
        docker run --rm -e DEKEN_USERNAME -e DEKEN_PASSWORD \
          --volume ./${{ env.LIBNAME }}-src:/${{ env.LIBNAME }} registry.git.iem.at/pd/deken \
          deken upload -v "${{ github.ref_name }}" /${{ env.LIBNAME }}
